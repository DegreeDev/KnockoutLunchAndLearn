@{
	ViewBag.Title = "Form";
}
@Html.Partial("_Navigation", "Form")
<h2>Form</h2>

<form data-bind="submit: Submit" role="form">
	<ul id="stage-tabs" class="nav nav-pills">
		<!-- ko foreach: stages -->
		<li><a data-bind="attr: { href: '#' + stageId }, text: name" data-toggle="pill"></a></li>
		<!-- /ko -->
		<li class="active always-on"><a href="#" data-bind="click: AddStage">+ Add Stage</a></li>
	</ul>
	<div class="tab-content" data-bind="foreach: stages">
		<div data-bind="attr: { id: stageId }" class="tab-pane">
			<div class="panel panel-default">
				<div class="panel-body">
					<div class="row">
						<div class="col-md-3">
							<div class="form-group">
								<label>
									Name
								</label>
								<input type="text" data-bind="value: name, valueUpdate: 'keyUp'" class="form-control" />
							</div>
						</div>
						<div class="col-md-4">
							<div class="form-group">
								<label data-bind="pencilEdit: stageInformationAlias"></label>
								<!--ko foreach: stageInformations-->
									<textarea data-bind="value: $data" class="form-control"></textarea>
								<!-- /ko -->
								<button class="btn btn-link" data-bind="click: AddStageInformation">+ Add</button>
							</div>
						</div>
					</div>
					<hr />
					<div class="row">
						<!--Task Groups -->
						<div class="col-md-3">
							<div data-bind="sortable: { data: taskGroups, connectClass: 'task-groups' }">
								<div class="panel panel-default">
									<div class="panel-body">
										<label data-bind="pencilEdit: name"></label>
										<div class="list-group" data-bind="sortable: { data: tasks, connectClass: 'tasks' }">
											<a href="#" class="list-group-item" data-bind="click: $parents[1].SelectTask, selectable: 'task'">
												<label data-bind="text: name"></label>
												<i class="glyphicon glyphicon-chevron-right pull-right"></i>
											</a>
										</div>
										<button class="btn btn-link" data-bind="click: AddTask">+ Add Task</button>
									</div>
								</div>
							</div>
							<button class="btn btn-link" data-bind="click: AddTaskGroup">+ Add Task Group</button>

							<div data-bind="sortable: { data: verifiableOutcomeGroups, connectClass: 'vo-groups' }">
								<div class="panel panel-default">
									<div class="panel-body">
										<label data-bind="pencilEdit: name"></label>
										<div class="list-group" data-bind="sortable: { data: tasks, connectClass: 'tasks' }">
											<a href="#" class="list-group-item" data-bind="click: $parents[1].SelectTask, selectable: 'task'">
												<label data-bind="text: name"></label>
												<i class="glyphicon glyphicon-chevron-right pull-right"></i>
											</a>
										</div>
										<button class="btn btn-link" data-bind="click: AddTask">+ Add Task</button>
									</div>
								</div>
							</div>
							<button class="btn btn-link" data-bind="click: AddVerifiableOutcomeGroup">+ Add Verifiable Outcome Group</button>
						</div>
						<!-- ko if: selectedTask -->
						<div class="col-md-9" data-bind="with: selectedTask">
							<div class="panel panel-default">
								<div class="panel-body">
									<div class="row">
										<div class="form-group">
											<div class="col-md-4">
												<label>Task Name</label>
												<input type="text" data-bind="value: name, valueUpdate: 'keyUp' " class="form-control" />
											</div>
											<div class="col-md-4">

											</div>
										</div>
									</div>
									<hr />
									<div class="row">
										<div class="col-md-3">
											<h4>Actions</h4>
											<div class="list-group" data-bind="sortable: { data: actions, connectClass: 'actions' }">
												<a href="#" class="list-group-item" data-bind="click: $parent.SelectAction, selectable : 'action'">
													<label data-bind="text: name"></label>
													<i class="glyphicon glyphicon-asterisk red" data-bind="visible: isRequired"></i>
													<i class="glyphicon glyphicon-chevron-right pull-right"></i>
												</a>
											</div>
											<button class="btn btn-link" data-bind="click: AddAction">+ Add Action</button>
										</div>
										<!-- ko if: selectedAction -->
										<div class="col-md-9" data-bind="with: selectedAction">
											<div class="form-group">
												<label>Action Name</label>
												<input type="text" data-bind="value: name, valueUpdate: 'keypress' " class="form-control" />

												<label>Description</label>
												<textarea data-bind="text: description, valueUpdate: 'keypress' " class="form-control"></textarea>

												<label class="checkbox">
													<input type="checkbox" data-bind="checked: isRequired" />
													Is this action required?
												</label>

												<div data-bind="foreach: linkOptions">
													<label class="radio-inline">
														<input type="radio" data-bind="attr : { name : $parent.actionid + 'option', value: $data }, checked: $parent.linkedTo" />
														<!-- ko text: $data --><!-- /ko -->
													</label>
												</div>

												<button class="btn btn-danger" data-bind="click: $parent.RemoveAction"><i class="glyphicon glyphicon-remove"></i>Remove</button>
											</div>
										</div>
										<!-- /ko -->
									</div>
								</div>
							</div>
						</div>
						<!-- /ko -->
					</div>
				</div>
			</div>
		</div>
	</div>
	<button class="btn btn-primary" type="submit">Save</button>
</form>


@section scripts {
	<script>
		(function(exports){
			exports.sink = {
				Update: function (data) {
					console.log(ko.toJSON(data));
				},
				Track: function (data) {

				},
				Sync : function (value) {
					console.log(value);
					value.subscribe(function (newValue) {
						exports.sink.Update(newValue);
					});
				}
			};
			


		})(window);

		function Template() {
			var self = this;

			self.id = $.guid++;
			self.templateId = "template-" + self.id;
			self.name = ko.observable();
			self.description = ko.observable();
			self.stages = ko.observableArray();

			self.Submit = function () {

			};

			self.AddStage = function () {
				self.stages.push(new Stage(self.stages().length + 1));
			};

			sink.Sync(ko.toJSON(self));
		}

		function Stage(index) {
			var self = this;
			self.id = $.guid++;
			self.stageId = "stage-" + self.id;
			self.name = ko.observable(self.stageId);
			self.descriptions = ko.observable();
			self.duration = ko.observable();
			self.stageInformations = ko.observableArray();
			self.AddStageInformation = function () {
				self.stageInformations.push("");
			};
			self.stageInformationAlias = ko.observable("Additional Buyer Alignments"); 

			self.verifiableOutcomeGroups = ko.observableArray();
			self.taskGroups = ko.observableArray();

			self.allGroups = ko.computed(function () {
				return self.taskGroups().concat(self.verifiableOutcomeGroups());
			});

			self.AddTaskGroup = function () {
				self.taskGroups.push(new TaskGroup(true, null, "task"));
			};
			self.AddVerifiableOutcomeGroup = function () {
				self.verifiableOutcomeGroups.push(new TaskGroup(true, null, "vo"));
			};

			self.tasksAvailableForLink = ko.computed(function () {

			});

			self.selectedTask = ko.observable();
			self.SelectTask = function (task) {
				console.log("Selected task: " + ko.toJSON(task));
				self.selectedTask(task);
			};

			if (self.verifiableOutcomeGroups().length === 0) {
				self.AddVerifiableOutcomeGroup(); 
			}
			if (self.taskGroups().length === 0) {
				self.AddTaskGroup();
			}
		}

		function TaskGroup(removable, name, type) {
			var self = this;

			self.id = $.guid++;

			self.taskGroupId = "taskGroup" + self.id;
			self.name = ko.protectedObservable(name || self.taskGroupId);
			self.tasks = ko.observableArray();

			self.removable = removable;
			self.taskGroupType = type || "task";

			self.AddTask = function () {
				self.tasks.push(new Task());
			};
			self.RemoveTask = function (task) {
				self.tasks.remove(task);
			};

		}

		function Task() {
			var self = this;
			self.id = $.guid++;
			self.taskId = "task-" + self.id;
			self.name = ko.observable(self.taskId);
			self.coaching = ko.observable();
			self.coachingAlais = ko.observable();
			self.actions = ko.observableArray();

			self.AddAction = function () {
				self.actions.push(new Action());
			};
			self.RemoveAction = function (action) {
				self.actions.remove(action);
			};

			self.SelectAction = function (action) {
				self.selectedAction(action);
			};
			self.selectedAction = ko.observable();
		}

		function Action() {
			var self = this;
			self.id = $.guid++;
			self.actionId = "action-" + self.id;
			self.name = ko.observable(self.actionId);
			self.isRequired = ko.observable(false);
			self.description = ko.observable(self.actionId);

			self.linkedTo = ko.observable();
			self.link = ko.observable();

			self.linkOptions = ["None", "Form", "Page"];
		}
		$('.nav a').click(function (e) {
			e.preventDefault()
			$(this).tab('show')
		});

		ko.bindingHandlers.pencilEdit = {
			init: function (e, va, aba, vm) {
				var $e = $(e),
					$input = $("<input type='text' style='width:0px;opacity:0;' />"),
					$pencil = $("<i class='glyphicon glyphicon-pencil blue pvs phs'></i>");

				$e.after($input).addClass("pointer");
				$input.after($pencil);

				var bindings = {
					input: {
						value: va(),
						event: {
							blur: function () {
								$e.removeClass("hidden");
								$input.css("width", "0px").css("opacity", "0");
								va().commit();
							},
						},
						valueUpdate: "keyup"
					},
					element: {
						text: va(),
						event: {
							dblclick: function (data, event) {
								handleClick(event);
							}
						}
					}
				},
				handleClick = function (event) {
					$input.css("width", "auto").css("opacity", "1");
					$e.addClass("hidden");
					$input.focus();
					return false;
				};
				ko.utils.registerEventHandler($pencil[0], "click", handleClick);
				ko.utils.registerEventHandler($input[0], "keydown", function (event) {
					var hide = false;
					//enter
					if (event.keyCode === 13) {
						hide = true;
						va().commit();
					}
					else if (event.keyCode === 27) {
						hide = true;
						va().reset();
					}

					if (hide) {
						$e.removeClass("hidden");
						$input.css("width", "0px").css("opacity", "0");
					}
					return true;
				});
				ko.applyBindingsToNode(e, bindings.element);
				ko.applyBindingsToNode($input[0], bindings.input);

				va().subscribe(function (newValue) {
					console.log("Value Updated: " + newValue);
				});
			}
		};

		ko.bindingHandlers.selectable = {
			init: function (e, va, aba, vm) {
				var $e = $(e),
					value = va();
				$e.addClass("ko-selectable-" + value);

				ko.applyBindingsToNode(e, {
					click: function () {
						$(".ko-selectable-" + value).removeClass("active");
						$e.addClass("active");
						console.log("applied bg-info");
					}
				});
			}
		};

		//http://www.knockmeout.net/2011/03/guard-your-model-accept-or-cancel-edits.html
		ko.protectedObservable = function (initialValue) {
			//private variables
			var _actualValue = ko.observable(initialValue),
				_tempValue = initialValue;

			//computed observable that we will return
			var result = ko.computed({
				//always return the actual value
				read: function () {
					return _actualValue();
				},
				//stored in a temporary spot until commit
				write: function (newValue) {
					_tempValue = newValue;
				}
			});

			//if different, commit temp value
			result.commit = function () {
				if (_tempValue !== _actualValue()) {
					_actualValue(_tempValue);
				}
			};

			//force subscribers to take original
			result.reset = function () {
				_actualValue.valueHasMutated();
				_tempValue = _actualValue();   //reset temp value
			};

			return result;
		};

		ko.applyBindings(new Template());
	</script>
}