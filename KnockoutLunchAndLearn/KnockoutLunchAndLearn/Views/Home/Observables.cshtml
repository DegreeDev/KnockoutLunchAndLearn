@{
    ViewBag.Title = "Observables";
}
@Html.Partial("_Navigation", "Observables")

<h2>Observables</h2>

<p>These are the most important thing on KnockoutJS and really what makes it worth using. They are basically an implementation of the a publisher/subscriber pattern.</p>
<p>Observables have two main features, getting and setting</p>

<h4>Setting</h4>
<pre>
    function ViewModel(){
        var self = this; 
        self.name = ko.observable("DefaultName"); 

        self.name("Matthew");
    }
</pre>

<h4>Getting</h4>
<pre>
    function ViewModel(){
        var self = this; 
        self.name = ko.observable("Default Name"); 
        console.log(self.name());
    }
</pre>

<h4>Bad!!</h4>
<p>If you do something like this:</p>
<pre>
     function ViewModel(){
        var self = this; 
        self.name = ko.observable("DefaultName"); 

        self.name = "Matthew";
    }
</pre>

<p>You are essentially overwriting the observable. Anyone accessing it with the () notation will not get an error saying that 'name' is not a function.</p>
<p>Whenever somebody uses an observable they are essentially subscribing to when the value changes. They will get notified with the new value every time it changes.</p>

<h4>Manual Subscriptions</h4>
<pre>
     function ViewModel(){
        var self = this; 
        self.name = ko.observable("Default Name"); 
        
        self.name.subscribe(function(newValue){
            console.log("name have been changed to: " + newValue);
        });

        self.name("Matthew");
    }
</pre>
<p>In this example, every time the name is changed, it will write out to the console.</p>

<hr />
<h4>Don't be afraid of the code: </h4>
<pre>
    function observable() {
        if (arguments.length > 0) {
            // Write

            // Ignore writes if the value hasn't changed
            if (observable.isDifferent(_latestValue, arguments[0])) {
                observable.valueWillMutate();
                _latestValue = arguments[0];
                if (DEBUG) observable._latestValue = _latestValue;
                observable.valueHasMutated();
            }
            return this; // Permits chained assignments
        }
        else {
            // Read
            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a "read" operation
            return _latestValue;
        }
    }
</pre>
<a href="https://github.com/knockout/knockout/blob/master/src/subscribables/observable.js">The Code</a>
<p>As you can see here all that the observable does is if it has arguments, it attempts to set the new value and set the valueHasMutated flag to true. If no arguments are passed in, the current value is returned. Nothing too complicated :)</p>