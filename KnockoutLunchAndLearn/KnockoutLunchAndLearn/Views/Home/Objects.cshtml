@{
	ViewBag.Title = "Objects";
}
@Html.Partial("_Navigation", "Objects")

<h2>Objects and Arrays</h2>

<h4>Defining Objects / Arrays in JavaScript</h4>
<pre>
	var obj = {};			//best
	var obj = new Object();		//just don't do

	var array = [];			//best
	var array = new Array();	//just don't do

	var obj = { name : "matt" };
	var array = [ "matt", "eric" ]; 
	var objArray = [ { name : "matt" }, { name : "eric } ]; 

	//Accessing
	var obj = { name : "matt" };  
		//obj.name => matt
	
	var array = [ "matt", "eric" ];  
		//array[0] => matt array[1] => eric
	
	var objArray = [ { name : "matt" }, { name : "eric } ]; 
		//array[0].name => matt

	--Complicated Examples--

	var data = {
		person : {
			name : "Matt",
			languages : [ "C#", "JavaScript"],
			jobs : [
				{ location : "Windy City Wire", years : 2 },
				{ location : "The Savo Group", years: 1 }
			]
		}
	};

	//data.person.jobs[0].location => Windy City Wire
	or 
	//data["person"]["jobs"][0]["location"] => Windy City Wire
</pre>

<h4>Setting Up Objects</h4>
<p>In general there are two ways to set value on an object</p>
<pre>
var obj = {}; 

-Dot Notation
obj.name = "Matthew"  

-Property Notation
obj["name"] = "Matthew"
</pre>

<h4>Why would you ever use property notation?</h4>
<a href="https://github.com/DegreeDev/Registrar/blob/master/registrar.js">The _setApp function in Registrar</a>

<h2>In Action:</h2>
	<div class="row">
	<div class="col-md-6">
		<h4>View Model 1</h4>
		<div id="ViewModel1">
			<div class="form-group">
				<label for="name1" class="control-label">Name</label>
				<input class="form-control" id="name1" data-bind="value: name" />
			</div>
			<div class="form-group">
				<button class="btn btn-primary" data-bind="click: AddName">Add Name</button>
			</div>
			<div class="form-group">
				<ul data-bind="foreach: names" class="list-group">
					<li class="list-group-item">
						<span data-bind="text: $data"></span>
						<button data-bind="click: $parent.RemoveName" class="btn btn-link">Remove</button>
					</li>
				</ul>
			</div>
		</div>
	</div>
	<div class="col-md-6">
		<h4>View Model 2</h4>
		<div id="ViewModel2">
			<div class="form-group">
				<label for="name2" class="control-label">Name</label>
				<input class="form-control" id="name2" data-bind="value: name" />
			</div>
			<div class="form-group">
				<button class="btn btn-primary" data-bind="click: AddName">Add Name</button>
			</div>
			<div class="form-group">
				<ul data-bind="foreach: names" class="list-group">
					<li class="list-group-item">
						<span data-bind="text: $data"></span>
						<button data-bind="click: $parent.RemoveName" class="btn btn-link">Remove</button>
					</li>
				</ul>
			</div>
		</div>
	</div>
</div>
<h4>The Code:</h4>
<div class="row">
	<div class="col-md-6">
		<pre>
function ViewModel1() {
	var self = this;

	self.name = ko.observable();
	self.names = ko.observableArray();

	self.AddName = function () {
		self.names.push(self.name());
		self.name("");
	};
	self.RemoveName = function (name) {
		self.names.remove(name);
	};
}
		</pre>
	</div>
	<div class="col-md-6">
		<pre>
var ViewModel2 = function () {
	var self = this;

	self.name = ko.observable();
	self.names = ko.observableArray();

	self.AddName = function () {
		self.names.push(self.name());
		self.name("");
	};
	self.RemoveName = function (name) {
		self.names.remove(name);
	};
};
		</pre>
	</div>
</div>

@*Disclaimer: DONT DO THIS INLINE*@
@section scripts {
	<script>
		function ViewModel1() {
			var self = this;

			self.name = ko.observable();
			self.names = ko.observableArray();

			self.AddName = function () {
				self.names.push(self.name());
				self.name("");
			};
			self.RemoveName = function (name) {
				self.names.remove(name);
			};
		}

		var ViewModel2 = function () {
			var self = this;

			self.name = ko.observable();
			self.names = ko.observableArray();

			self.AddName = function () {
				self.names.push(self.name());
				self.name("");
			};
			self.RemoveName = function (name) {
				self.names.remove(name);
			};
		};

		ko.applyBindings(new ViewModel1(), $("#ViewModel1")[0]);
		ko.applyBindings(new ViewModel2(), $("#ViewModel2")[0]);
	</script>
}