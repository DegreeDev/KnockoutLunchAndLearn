@{
    ViewBag.Title = "Structure";
}
@Html.Partial("_Navigation", "Structure")



<h2>Structure</h2>

<p>
    Structure is very important in JavaScript in general because lets face it. It's a hobby language. But with that being said
    there are some very well defined patterns (see patterns page on the home page). Demonstrated below is a bit of 
    the module pattern and the constructor pattern.
</p>

<p>
    In SPP we have adopted 3 default files with very specific purposes. init.js, bindings.js, and services.js
</p>

<div class="panel panel-default">
    <div class="panel-heading">init.js</div>
    <div class="panel-body">
        <pre>
r("init.app", function () {
    (function ($, ko, exports) {
        //set up object for the rest of the app to use; 
        console.log("actually ran init");
        exports.app = {
            services: {}
        };
    })(window.jQuery, window.ko, window);
}).OnReady(["init.app", "services.app", "viewmodel.app", "bindings.app"]);
    </pre>
        <p>
            init.js is build to hold all of the configuration information that is required for the app to live. Examples of stuff that may live in this file are external library default configurations, debugging information or settings.
        </p>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">services.js</div>
    <div class="panel-body">
        <pre>
r("services.app", function () {
    (function ($, ko, exports) {
        var
            services = {
                elements: {
                    bindings: $(".binding-context").get(0)
                }
            },
            mock = {

            };
        ko.utils.extend(window.app.services, mock);
        exports.services = services;
    })(window.jQuery, window.ko, window.app);
});
        </pre>
        <p>
            services.js is where you put all of the data access calls, selectors for jQuery elements, error messages, shared objects (such as default options for lists), app specific options (such as high/low watermarks).
        </p>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">bindings.js</div>
    <div class="panel-body">
        <pre>
r("bindings.app", function () {
    (function ($, ko, ViewModel, services) {
        var model = new ViewModel();
        ko.applyBindings(model, services.elements.bindings);
    })(window.jQuery, window.ko, app.ViewModel, app.services);
});
    </pre>
        <p>
            bindings.js simply builds up your model and applies the bindings. If you want access to your model in the services, I suggest you make a property in the services.js to get/set the model. 
        </p>
    </div>
</div>

<span class="label label-success" data-bind="text: name"></span>



@section scripts {
    <script src="~/Scripts/app/init.js"></script>
    <script src="~/Scripts/app/bindings.js"></script>
    <script src="~/Scripts/app/services.js"></script>
    <script src="~/Scripts/app/viewModel.js"></script>
}